---
layout: post
title: Invoking Fortran functions from Java
tags: Java, Fortran, JNI
excerpt: A step-by-step guide to write a Java code to invoke a Fortran function using Java Native Interface. 
---

%{color:green}// Assumption: I assume that you have already installed Java SDK, gfortran, g++ on your machine and you are using Linux.%

<ol>

<li>
Open a Terminal
</li>

<li>
Create a directory named @src/com/sangeethlabs/jni/@ to create the source files and @bin@ to keep the compiled code and shared objects.

<pre>
mkdir -p src/com/sangeethlabs/jni
mkdir bin
</pre>

</li>

<li>
Open your favourite text editor, create a new file and write the following code

{% highlight java  %}
package com.sangeethlabs.jni;

public class Fortran {
	static {
		System.loadLibrary("FortranJNI");
	}
	
	public synchronized native static int sum(int a, int b);
	
	public static void main(String[] args) {
		int a = 10, b = 30;
		int result = Fortran.sum(a, b);
		System.out.printf("%s + %s = %s\n", a, b, result);
	}	
}
{% endhighlight %}

Save the file as @Fortran.java@ under @src/com/sangeethlabs/jni/@ directory. 
%{color:green}// NOTE: Ensure that the class name and the file name are same.% 
</li>

<li>
Create a new file and write the following Fortran code

{% highlight fortran %}
      INTEGER FUNCTION FORTRANSUM(I,J)
      FORTRANSUM = I+J
      RETURN
      END
{% endhighlight %}

Save the file as @fortran.f@ under @src/@ directory.
</li>

<li>
Go back to your Terminal
</li>

<li>
Run the following command to compile the Java source code:

<pre>
javac -d bin src/com/sangeethlabs/jni/Fortran.java
</pre>

This generates a class file named @Fortran.class@ under the directory @bin/com/sangeethlabs/jni/@.
</li>

<li>
Run the following command to compile the Fortran source code:

<pre>
gfortran -c -o "bin/fortran.o" src/fortran.f
</pre>

This generates the object file @fortran.o@ under @bin/@ directory. 
</li>

<li>
Now run the following command to generate header file for the Java Native Interface code.
<pre>javah -d src -classpath bin com.sangeethlabs.jni.Fortran</pre>

This results in a C/C++ header file named @com_sangeethlabs_jni_Fortran.h@ under the directory @src/@ with the following contents

{% highlight cpp %}
/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class com_sangeethlabs_jni_Fortran */

#ifndef _Included_com_sangeethlabs_jni_Fortran
#define _Included_com_sangeethlabs_jni_Fortran
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     com_sangeethlabs_jni_Fortran
 * Method:    sum
 * Signature: (II)I
 */
JNIEXPORT jint JNICALL Java_com_sangeethlabs_jni_Fortran_sum
  (JNIEnv *, jclass, jint, jint);

#ifdef __cplusplus
}
#endif
#endif
{% endhighlight %}
</li>

<li>
Open your favourite text editor, create a new file and write the following C++ code

{% highlight cpp  %}
#include "com_sangeethlabs_jni_Fortran.h"

#include <jni.h>

extern"C" {
	int fortransum_(int *, int *);
}

/*
 * Class:     com_sangeethlabs_jni_Fortran
 * Method:    sum
 * Signature: (II)I
 */
JNIEXPORT jint JNICALL Java_com_sangeethlabs_jni_Fortran_sum(JNIEnv *env, 
                                                             jclass kclass, 
                                                             jint a, 
                                                             jint b)
{
	return fortransum_(&a,&b);
}
{% endhighlight %}

Save the file as @com_sangeethlabs_jni_Fortran.cpp@ under @src/@ directory.
</li>

<li>
Run the following command to compile the C++ source code 

<pre>g++ -I$JAVA_HOME/include -I$JAVA_HOME/include/linux -fPIC -c -o "bin/com_sangeethlabs_jni_Fortran.o" src/com_sangeethlabs_jni_Fortran.cpp
</pre>

This generates an object file @com_sangeethlabs_jni_Fortran.o@ under the directory @bin/@. 

%{color:green}The compiler option @-fPIC@ is required to create a shared library with the object file @com_sangeethlabs_jni_Fortran.o@.%
</li>

<li>
Now create a shared library named @libFortranJNI.so@ with @com_sangeethlabs_jni_Fortran.o@ and @fortran.o@ under the directory @bin/@ using the following command

<pre>g++ -shared -o "bin/libFortranJNI.so" bin/fortran.o bin/com_sangeethlabs_jni_Fortran.o
</pre>

</li>

<li>
Now run the following command to execute the Java class.

<pre>java -cp bin -Djava.library.path=bin com.sangeethlabs.jni.Fortran
</pre>

The output of the program will be as shown below,

<pre>10 + 30 = 40
</pre>

%{color:green}// NOTE: "-Djava.library.path=." option indicates to JVM that "libFortranJNI.so" can be located under the current directory. Another alternative is to set the environment variable LD_LIBRARY_PATH to include the path under which "libFortranJNI.so" can be located. By doing so, we can execute the Java code as shown below%

<pre>export LD_LIBRARY_PATH=bin:$LD_LIBRARY_PATH
java -cp bin com.sangeethlabs.jni.Fortran
</pre>

</li>

</ol>

Now you have successfully invoked a Fortran function from a Java program using Java Native Interface !