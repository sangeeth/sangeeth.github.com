---
layout: post
title: Hello World ! Using Java Native Interface
tags: Java, JNI, Native, C++, C
excerpt: A simple step by step guide to write your first Hello world program using Java Native Interface 
---

%{color:green}// Assumption: I assume that you have already installed Java SDK on your machine and you are using Linux.%
<ol>

<li>
Open a Terminal
</li>

<li>
Open your favourite text editor, create a new file and write the following code

{% highlight java linenos %}
package com.sangeethlabs;

public class HelloJNI {
    static {
        System.loadLibrary("HelloJNI");
    }
    public static native void greet(String message);
    public static void main(String [] args) {
        greet("Hello World !");
    }
}
{% endhighlight %}

Save the file as @HelloJNI.java@ under @com/sangeethlabs@ directory. 
%{color:green}// NOTE: Ensure that the class name and the file name are same.% 
</li>

<li>
Go back to your Terminal
</li>

<li>
run the following command to compile the source code:

<pre>
javac com/sangeethlabs/HelloJNI.java
</pre>

This generates a class file named @HelloJNI.class@ in the same directory.
</li>

<li>
Now run the following command to generate header file for native code.
<pre>javah com.sangeethlabs.HelloJNI</pre>

This results in a C/C++ header file named com_sangeethlabs_HelloJNI.h in the same directory with the following contents

{% highlight cpp %}
/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class com_sangeethlabs_HelloJNI */

#ifndef _Included_com_sangeethlabs_HelloJNI
#define _Included_com_sangeethlabs_HelloJNI
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     com_sangeethlabs_HelloJNI
 * Method:    greet
 * Signature: (Ljava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_com_sangeethlabs_HelloJNI_greet
      (JNIEnv *, jclass, jstring);

#ifdef __cplusplus
}
#endif
#endif
{% endhighlight %}

</li>

<li>
Open your favourite text editor, create a new file and write the following code

{% highlight cpp linenos %}
#include "com_sangeethlabs_HelloJNI.h"

#include <stdio.h>

JNIEXPORT void JNICALL Java_com_sangeethlabs_HelloJNI_greet
      (JNIEnv *env, jclass jClazz, jstring jstrText) {
      
    const char *str;
    str = env->GetStringUTFChars(jstrText, NULL);
    printf("%s\n", str);
    env->ReleaseStringUTFChars(jstrText, str);
}
{% endhighlight %}

    Save the file as HelloJNI.cpp.
</li>

<li>
Now compile the C++ code and create a shared object named libHelloJNI.so using the following commands

<pre>g++ -shared -I$JAVA_HOME/include/ -I$JAVA_HOME/include/linux -fPIC -g -c HelloJNI.cpp
g++ -shared -Wl,-soname,libHelloJNI.so -o libHelloJNI.so -lc HelloJNI.o
</pre>

</li>

<li>
Now run the following command to execute the Java class.

<pre>java -cp . -Djava.library.path=. com.sangeethlabs.HelloJNI
</pre>

The output of the program will be as shown below,

<pre>Hello World !
</pre>

%{color:green}// NOTE: "-Djava.library.path=." option indicates to JVM that "libHelloJNI.so" can be located under the current directory. Another alternative is to set the environment variable LD_LIBRARY_PATH to include the path under which "libHelloJNI.so" can be located. By doing so, we can execute the Java code as shown below%

<pre>export LD_LIBRARY_PATH=.:$LD_LIBRARY_PATH
java -cp . com.sangeethlabs.HelloJNI
</pre>

</li>

</ol>

Now you have successfully executed your first Java program using Java Native Interface on Linux !

